version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udanode-backend-<<parameters.workflow_id>>"
jobs:
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build the backend"
          command: |
            cd backend
            npm install
      - save_cache:
          paths: [backend/node_modules]
          key: "backend-build"
  lint-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: "Lint the backend"
          command: |
            cd backend
            npm install
            npm run lint
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: "Ensure that backend infrasturcture exists"
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/infra.yml \
            --stack-name "udanode-backend-${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
            --tags project=udanode-backend \
      - run:
          name: "Add EC2 Instance IP to the ansible inventory"
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - restore_cache:
          keys: [backend-build]
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9f:eb:a3:74:60:33:b5:7c:8e:b5:c4:90:c8:85:17:bb"]
      - attach_workspace:
          at: ~/
      - run:
          name: "Install dependencies"
          command: |
            apk add openssh-client
            apk add --update ansible
      - run:
          name: "Configure server"
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9f:eb:a3:74:60:33:b5:7c:8e:b5:c4:90:c8:85:17:bb"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install tar utility
          command: |
            sudo apt -y update
            sudo apt -y upgrade
            sudo apt -y install software-properties-common
            sudo apt-get -y install tar
      - run:
          name: Install gzip unzip utility
          command: |
            sudo apt-get -y install gzip
            sudo apt-get -y install unzip
      - run:
          name: Install python
          command: |
            sudo apt-get -y install python3
      - run:
          name: "Install ansible"
          command: |
            sudo add-apt-repository --y ppa:ansible/ansible
            sudo apt-get -y install ansible
      - run:
          name: Install awscli
          command: |
            echo "insecure" >> ~/.curlrc
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: "Deploy backend"
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
workflows:
  default:
    jobs:
      - build-backend
      - lint-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [lint-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
