version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.4.0
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

jobs:
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build the backend"
          command: |
            cd backend
            npm install
      - save_cache:
          paths: [backend/node_modules]
          key: "backend-build"
  lint-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: "Lint the backend"
          command: |
            cd backend
            npm install
            npm run lint
  build-docker-deploy-cluster:
    executor: aws-cli/default
    steps:
      - setup_remote_docker
      - checkout
      - aws-cli/setup
      - run: aws --version

      - run:
          name: Install Kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - run:
          name: Install EKSCTL
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: Login to AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin 912377934520.dkr.ecr.us-east-1.amazonaws.com/udacitycapstoneappnew
      - run:
          name: Build Docker Image
          command: |
            cd backend
            docker build -t udacitycapstoneappnew:${CIRCLE_WORKFLOW_ID:0:7} .
            docker images
      - run:
          name: Push Docker Image to AWS ECR
          command: |
            docker tag udacitycapstoneappnew:${CIRCLE_WORKFLOW_ID:0:7} 912377934520.dkr.ecr.us-east-1.amazonaws.com/udacitycapstoneappnew:latest
            docker push 912377934520.dkr.ecr.us-east-1.amazonaws.com/udacitycapstoneappnew:latest
      - run:
          name: Create EKS Cluster
          command: |
            eksctl create cluster --name ${CLUSTER_NAME} --managed --node-type "t2.small" --nodes 1
  deploy-cluster:
    executor: aws-eks/python3
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: ${CLUSTER_NAME}
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment/deployment.yaml
          resource-name: deployment/udacity-capstone-app

  test-cluster:
    executor: aws-eks/python3
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: ${CLUSTER_NAME}
      - run:
          name: Test cluster
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment

            kubectl get pods
            kubectl get services
            sleep 30
            for attempt in {1..20}; do
              EXTERNAL_IP=$(kubectl get service udacity-capstone-app-service | awk '{print $4}' | tail -n1)
              echo "Checking external IP: ${EXTERNAL_IP}"
              if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
                break
              fi
              echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
              sleep 10
            done
            sleep 180
            curl -s --retry 10 "http://$EXTERNAL_IP:8080/health_check" | grep "Application running"

workflows:
  deployment:
    jobs:
      - build-backend
      - lint-backend:
          requires: [build-backend]
      - build-docker-deploy-cluster:
          requires: [lint-backend]
      - deploy-cluster:
          requires: [build-docker-deploy-cluster]
      - test-cluster:
          requires: [deploy-cluster]
