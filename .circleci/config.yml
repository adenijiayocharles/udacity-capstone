# version: 2.1
# orbs:
#   aws-eks: circleci/aws-eks@2.2.0
#   kubernetes: circleci/kubernetes@1.3
# jobs:
#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - run:
#           name: "Build the backend"
#           command: |
#             cd backend
#             npm install
#       - save_cache:
#           paths: [backend/node_modules]
#           key: "backend-build"
#   lint-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: ["backend-build"]
#       - run:
#           name: "Lint the backend"
#           command: |
#             cd backend
#             npm install
#             npm run lint
#   build-and-push-docker-image:
#     docker:
#       - image: docker:17.05.0-ce-git
#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: Build application Docker image
#           command: |
#             cd backend
#             docker build -t adenijiayocharles/udadnodeapp:${CIRCLE_SHA1} .
#             docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#             docker push adenijiayocharles/udadnodeapp:${CIRCLE_SHA1}
#   deploy:
#     docker:
#       - image: circleci/python:3.7
#     steps:
#       - checkout
#       - run:
#           name: Install awscli and gettext-base
#           command: |
#             sudo pip3 install awscli
#             sudo apt-get install gettext-base
#       - run:
#           name: Install aws-iam-authenticator
#           command: |
#             curl -o aws-iam-authenticator curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
#             chmod +x ./aws-iam-authenticator
#             sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
#       - run:
#           name: Install kubectl
#           command: |
#             curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
#             chmod +x ./kubectl
#             sudo mv ./kubectl /usr/local/bin/kubectl
#       - run:
#           name: Connect to cluster
#           command: |
#             aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name udanodeapp
#       - run:
#           name: Deploy
#           command: |
#             # cat deployment/deployment.yaml
#             # kubectl config view
#             # kubectl apply -f deployment/deployment.yaml --validate=true
#             kubectl get pods

# workflows:
#   default:
#     jobs:
#       - build-backend
#       - lint-backend:
#           requires: [build-backend]
#       - build-and-push-docker-image:
#           requires: [lint-backend]
#       - deploy:
#           requires: [build-and-push-docker-image]
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.2.0
  kubernetes: circleci/kubernetes@0.3.0

jobs:
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build the backend"
          command: |
            cd backend
            npm install
      - save_cache:
          paths: [backend/node_modules]
          key: "backend-build"
  lint-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: "Lint the backend"
          command: |
            cd backend
            npm install
            npm run lint
  build-and-push-docker-image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            cd backend
            docker build -t adenijiayocharles/udadnodeapp:${CIRCLE_SHA1} .
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            docker push adenijiayocharles/udadnodeapp:${CIRCLE_SHA1}
  deploy-application:
    executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: udanodeapp
          install-kubectl: true
          aws-region: eu-west-2
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/deployment.yaml"
          get-rollout-status: true
          resource-name: deployment/app-staging
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/service.yaml"
  test-application:
    executor: aws-eks/python3
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: udanodeapp
          install-kubectl: true
          aws-region: eu-west-2
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
            sleep 30
            for attempt in {1..20}; do
              EXTERNAL_IP=$(kubectl get service app-staging-deployment | awk '{print $4}' | tail -n1)
              echo "Checking external IP: ${EXTERNAL_IP}"
              if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
                break
              fi
              echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
              sleep 10
            done
            sleep 180
            curl -s --retry 10 "http://$EXTERNAL_IP/health_check"
workflows:
  default:
    jobs:
      - build-backend
      - lint-backend:
          requires: [build-backend]
      - build-and-push-docker-image:
          requires: [lint-backend]
      - deploy-application:
          requires: [build-and-push-docker-image]
      - test-application:
          requires: [deploy-application]
